name: Singapore GP Ticket Monitor (Simple)

on:
  schedule:
    # Run every 10 minutes
    - cron: '*/10 * * * *'
  workflow_dispatch: # Allow manual trigger
  
env:
  PYTHONPATH: ${{ github.workspace }}

permissions:
  contents: read
  issues: write

jobs:
  monitor-tickets:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run ticket monitor
      id: monitor
      run: |
        cd ${{ github.workspace }}
        python monitor_tickets.py
      continue-on-error: true
      
    - name: Create GitHub Issue Alert
      if: success() && steps.monitor.outputs.alert_needed == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const ticketCount = '${{ steps.monitor.outputs.ticket_count }}';
          const runUrl = `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
          
          // Read alert message directly from file
          let alertMessage = '';
          try {
            alertMessage = fs.readFileSync('alert_message.txt', 'utf8');
          } catch (error) {
            console.log('Could not read alert_message.txt:', error);
            alertMessage = 'Alert message not available';
          }
          
          const title = `🎫 Ticket Alert: ${ticketCount} target tickets found!`;
          const body = alertMessage + '\n\n' +
            '## 🚀 Quick Actions\n' +
            '- [🎫 Buy Tickets](https://singaporegp.sg/en/tickets/general-tickets/grandstands/)\n' +
            `- [📊 View Run Details](${runUrl})\n` +
            '- [⚙️ Monitor Settings](https://github.com/${{ github.repository }}/blob/main/MONITOR_SETUP.md)\n\n' +
            '## 📱 Mobile Notification\n' +
            'If you have the GitHub mobile app installed, you should receive a push notification for this issue.\n\n' +
            '---\n' +
            '**Monitoring Details:**\n' +
            `- 🕒 Generated at: ${new Date().toISOString()}\n` +
            '- 🔄 Workflow: ${{ github.workflow }}\n' +
            '- 📋 Run ID: ${{ github.run_id }}\n' +
            '- 🏷️ Repository: ${{ github.repository }}\n\n' +
            '> This issue was created automatically when target tickets were detected.\n' +
            '> Close this issue when you no longer need alerts for these tickets.';
          
          // Check if there's already an open issue for current tickets
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'ticket-alert'
          });
          
          // If no open issue exists, create a new one
          if (issues.data.length === 0) {
            const newIssue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['ticket-alert', 'automated', 'high-priority'],
              assignees: ['${{ github.repository_owner }}']
            });
            
            console.log(`Created new issue #${newIssue.data.number}`);
          } else {
            // Update existing issue with new alert
            const existingIssue = issues.data[0];
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              body: `## 🆕 New Alert - ${new Date().toISOString()}\n\n${alertMessage}\n\n[🎫 Buy Now](https://singaporegp.sg/en/tickets/general-tickets/grandstands/) • [📊 Run Details](${runUrl})\n\n---\nTotal alerts for this issue: ${existingIssue.comments + 1}`
            });
            
            // Update issue title to reflect new count
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              title: title
            });
            
            console.log(`Updated existing issue #${existingIssue.number}`);
          }
        
    - name: Log monitoring result
      if: always()
      run: |
        echo "Monitoring completed at $(date)"
        echo "Alert needed: ${{ steps.monitor.outputs.alert_needed }}"
        echo "Ticket count: ${{ steps.monitor.outputs.ticket_count }}"
        
    - name: Upload alert message as artifact
      if: success() && steps.monitor.outputs.alert_needed == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: alert-message-${{ github.run_number }}
        path: alert_message.txt
        retention-days: 30